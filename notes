// NOTE: dom content loaded is the even the browser sends when dom is loaded first
// it is safer to attach to it and then do the things that i want
// w/o it you could manipulate elements that are not in the page
window.addEventListener("DOMContentLoaded", function (event) { })

// can reuse it
window.addEventListener("DOMContentLoaded", function (event) { })


// has a third argument with options ??
// AddEventListenerOptions
const addEventListenerOptions = {
  capture: boolean,
  once: boolean,
  passive: boolean,
  signal: AbortSignal,
}
window.addEventListener("DOMContentLoaded", function (event) { }, addEventListenerOptions)

// NOTE: can create custom events
const myCustomEvent = new Event("mycustomevent")
let elm = document.querySelector("helllo")
elm.dispatchEvent(myCustomEvent)

// NOTE: Add alias to make it less verbose
const $ = (arguments) => document.querySelector.call(this, arguments)
const $$ = (arguments) => document.querySelectorAll.call(this, arguments)
HTMLElement.prototype.on = (a, b, c) => this.addEventListener(a, b, c)
HTMLElement.prototype.off = (a, b, c) => this.removeEventListener(a, b, c)
HTMLElement.prototype.$ = (s) => this.querySelector(s)
HTMLElement.prototype.$ = (s) => this.querySelectorAll(s)
// then you can use it like
let nav = $("nav")



// NOTE: history API
history.pushState(optional_state, null, "/url")
// event created:
window.addEventListener("popstate",)


// NOTE: WEB COMPONENTS
// creating components
class MyElement extends HTMLElement {
  constructor() { // Set up initial state, event listeners, etc.
    super()
  }

  // life cycle
  connectedCallback() { } // The element is added to the document
  disconnectedCallback() { } // The element is removed to the document

  adoptedCallback() { } // The element has been moved to a new document, from another ShadowDOM

  attributeChangedCallback(name, oldValue, newValue) { }
}

// can manually call the component by name in the html
// <my-element> </my-element>
customElements.define("my-element", MyElement);

// can bring a template that has structure inside of it &
//  stamp it as this component's child
// steps:
//  1. get the template
// append it as a child to the component
//


// if you want to have custom stylings and etc you need shadow dom
// so this element's node is now a whole new html tree
this.root = this.attachShadow({ mode: "open" })
this.loadCSS(this.root)

// can bring css files to it like so
/**
 * @param {ShadowRoot} node
 * @memberof MenuPage
 */
async function loadCSS(node) {
  const req = await fetch("/component.css")
  const css = await req.text()

  // create a style element and atatch this style to it
  const styles = document.createElement("style");
  styles.textContent = css
  node.appendChild(styles)
}


// NOTE: proxies are like middlewares for objects
// are useful to trigger updates
// they are like reactivity
//
// options ,
// get, set, has
// deleteProperty
// apply(calling the function)
// construct
// getOwnPropertyDescriptor
// defineProperty
// ownKeys
//
//
/** @type {ProxyHandler} */
const handler = {}
const proxiedStore = new Proxy(object, handler)


event.target // is the deepest element within there
event.currentTarget // is whoever contains it